---
description: For adding new projects for porfolio
globs: 
alwaysApply: false
---
# Cursor Rule: Adding a New Project Portfolio

## 1. SEO Requirements
- Update `public/sitemap.xml` with a new `<url>` for the project.
- Reference the sitemap in `public/robots.txt`.
- Add the project to the JSON-LD schema in `public/structured-data.js`.

## 2. OpenAI Search/Plugin Integration
- Add the project to `public/api/projects.json` and `public/api/search.json`.
- Update `/api/index.json` and `openapi.json` if needed.

## 3. Project Data Structures in `src/lib/projects.ts`

### A. Legacy Format (Old)
- Required fields:
  - `id`, `title`, `company`, `year`, `shortDescription`, `situation`, `steps`, `impact`, `lessons`
- `steps` is an object with arrays: `{ research: string[], strategy: string[], development: string[] }`
- Example:
  ```js
  {
    id: 'project-id',
    title: 'Project Title',
    company: 'Company',
    year: '2023',
    shortDescription: 'Summary.',
    situation: 'Context and background...',
    steps: {
      research: ['step1', 'step2'],
      strategy: ['step1', 'step2'],
      development: ['step1', 'step2']
    },
    impact: ['impact1', 'impact2'],
    lessons: ['lesson1', 'lesson2']
  }
  ```

### B. Structured Format (New)
- Required fields:
  - `id`, `title`, `company`, `year`, `shortDescription`,
  - `overview`, `background`, `journey`, `roadmapTable`, `metricsTables`, `resultsTable`, `subscriptionFunnel`, `conclusion`
- `journey` is an object with: `researchTable`, `strategy`, `development`, `architecture`, `techStackTable`
- For type compatibility, add empty legacy fields:
  ```js
  situation: '',
  steps: { research: [], strategy: [], development: [] },
  impact: [],
  lessons: [],
  ```
- Example:
  ```js
  {
    id: 'project-id',
    title: 'Project Title',
    company: 'Company',
    year: '2024',
    shortDescription: 'Summary.',
    overview: 'Markdown overview...',
    background: 'Markdown background...',
    journey: {
      researchTable: [['Area', 'Insights'], ['A', 'B']],
      strategy: ['step1', 'step2'],
      development: ['step1', 'step2'],
      architecture: '[Input] ‚Üí [Process] ‚Üí [Output]',
      techStackTable: [['Layer', 'Tech'], ['Client', 'React']]
    },
    roadmapTable: [['Release', 'Date', 'Highlights'], ['R1', '2024', '...']],
    metricsTables: [{ title: 'Metrics', data: [['Metric', 'Value'], ['A', 'B']] }],
    resultsTable: [['Step', 'Result'], ['A', 'B']],
    subscriptionFunnel: '* Trial to Paid Conversion: 35%\n* Retention (30-Day): 40%',
    conclusion: 'Markdown conclusion...',
    situation: '',
    steps: { research: [], strategy: [], development: [] },
    impact: [],
    lessons: [],
  }
  ```

## 4. Rendering Logic in `src/components/ProjectTemplate.tsx`

### A. Legacy Format Rendering
- Renders sections in this order:
  1. Situation (markdown)
  2. The Journey (steps.research, steps.strategy, steps.development)
  3. Impact & Results (impact)
  4. Key Learnings (lessons)
- Each step in steps arrays:
  - If it contains 'prototype' or 'proof of concept', rendered as a blue callout with üí° and "Strategic Prototype" (markdown supported)
  - If it contains 'note:' or starts with 'note ', rendered as a yellow callout with üìù and "Note" (markdown supported)
  - Otherwise, rendered as a bullet with markdown
  - Section header suppression: if a step matches the section header, it is not rendered
- Markdown is rendered using ReactMarkdown with GFM

### B. Structured Format Rendering
- Renders sections in this order:
  1. Overview (markdown)
  2. Background (markdown)
  3. Journey:
     - Research & Discovery (researchTable as HTML table)
     - Strategy & Planning (strategy as steps, with prototype/note callouts and markdown)
     - Development & Implementation (development as steps, with prototype/note callouts and markdown)
     - System Architecture (architecture as code block)
     - Tech Stack (techStackTable as HTML table)
  4. Product Roadmap (roadmapTable as HTML table)
  5. Metrics (metricsTables as HTML tables)
  6. Results Snapshot (resultsTable as HTML table)
  7. Subscription Funnel (markdown)
  8. Conclusion (markdown)
- For steps in strategy/development:
  - Uses the same callout logic as legacy (see above)
- Markdown is rendered using ReactMarkdown with GFM
- Fallback: If new-format fields are missing, falls back to legacy rendering

## 5. Formatting User-Provided Content
- Parse and split content into the above fields.
- Convert tables to 2D arrays, lists to arrays, code blocks to strings.
- Preserve markdown.
- Add empty legacy fields if required.
- For steps, use special formatting for 'prototype' and 'note' as described above.

---

**For implementation details, see @projects.ts and @ProjectTemplate.tsx.**

For more, see the [Cursor rules documentation](https://docs.cursor.com/context/rules#boilerplate-and-templates).
